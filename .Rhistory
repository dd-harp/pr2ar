## Pull shapefile and PfPR raster
shp <- getShp(ISO = loc)
PfPR2_10 <- getRaster(surface = "Plasmodium falciparum PR2-10", shp = shp, year = years)
PfPR2_10_df <- as.MAPraster(PfPR2_10)
autoplot(PfPR2_10_df, shp_df = shp)
## reformation into a matrix
pixPerRast <- table(PfPR2_10_df$raster_name)[[1]]
M = matrix(PfPR2_10_df$z, nrow = pixPerRast, ncol = length(years))
matplot(years, t(M[sample(1:nrow(M), 10),]), type = "l", )
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2, dt = 10)
i = 650
AR = PR2AR(M[i,], Tx = rep(0.4, length(M[i,])), PAR = PAR)
plot(years[-1], M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
lines(years[-1], AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
devtools::install_github("aucarter/pr2ar")
library(malariaAtlas); library(pr2ar); library(data.table)
# Set paramaeters of model
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2, dt = 10)
i = 650
AR = PR2AR(M[i,], Tx = rep(0.4, length(M[i,])), PAR = PAR)
plot(years[-1], M[i,-1], type = 'l', ylim = c(0, 1), xlab = "Years",  ylab = "Rate")
lines(years[-1], AR, lty = "dashed")
legend("topright",  legend = c("PfPR", "Attack-rate"), lty = 1:2)
pkgdown::build_articles()
devtools::build_vignettes()
pkgdown::build_articles()
devtools::build_vignettes()
pkgdown::build_articles()
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
echo = TRUE)
library(data.table); library(ggplot2)
# Solve for steady states using eigen function and algebraic solution
# Set up example B
dt = 10 # ten day time step
r = 1 / 200 # two hundred day duration of malaria infection
Q = exp(-r*dt)
A = 0.1
PAR = list(A = A, Q = Q)
makeB <- function(PAR) {
A = PAR$A
Q = PAR$Q
cbind(c(1 - A, A), c((1 - A)*(1 - Q), A*(1 - Q) + Q))
}
findYeq <- function(PAR, Bfn) {
B = Bfn(PAR)
e = eigen(B)
first = Re(e$vectors[ ,1])
Yeq = as.vector(first / sum(first))
return(Yeq)
}
Yeq1 = findYeq(PAR, makeB)
Yeq1
# Find steady state algebraically
algebYeq <- function(PAR) {
A = PAR$A
Q = PAR$Q
X = A / (1 - Q*(1 - A))
S  = 1 - X
Yeq = c(S,X)
return(Yeq)
}
Yeq2 = algebYeq(PAR)
Yeq2
# Confirm steady state
B = makeB(PAR)
sum(B %*% Yeq1 - Yeq1)
sum(B %*% Yeq2 - Yeq2)
# Convert attack-rate to equilibrium PR
AR2PR <- function(A, PAR, Bfn, eigen = T) {
PR = c()
for(Ai in A) {
PAR$A = Ai
if(eigen) {
PRi = findYeq(PAR, Bfn)[2]
} else {
PRi = algebYeq(PAR)[2]
}
PR = c(PR, PRi)
}
return(PR)
}
# Plot
A = seq(0, 1, 0.05)
X = AR2PR(A, PAR, makeB)
plot(A, X, type = "l")
## Solve for attack-rate from X using optimize function and algebraic solution
# optimize function
X = c(0.5, 0.6)
fn <- function(A, PAR, Bfn, X) {
PR = AR2PR(A, PAR, Bfn)
return(abs(X - PR))
}
optimA <- function(X, PAR, Bfn) {
A <- c()
for(Xi in X) {
Ai <- optimize(fn, c(0, 1), PAR = PAR, X = Xi, Bfn = Bfn)$minimum
A <- c(A, Ai)
}
return(A)
}
optimA(X, PAR, makeB)
# Algebraic solution
algebA <- function(X, PAR) {
Q = PAR$Q
A = (X - Q*X)/(1 - Q*X)
return(A)
}
algebA(X, PAR)
## Make plots
X = seq(0, 1, 0.05)
A1 <- optimA(X, PAR, makeB)
A2 <- algebA(X, PAR)
plot(X, A1, ylab = "A")
lines(X, A2)
# Convert PR to attack-rate
PR2AReq <- function(X, PAR, Bfn, optim = T) {
if(optim) {
AR = optimA(X, PAR, Bfn)
} else {
AR = algebA(X, PAR)
}
return(AR)
}
install.packages("formatR")
knitr::opts_chunk$set(prompt=T, comment=NA, collapse=T,
tidy=T, tidy.opts=list(width.cutoff=60),
highlight=T,
size="\\normalsize")
options(width=60)
knitr::knit_hooks$set(document = function(x) gsub("```\n+```\n", "", x),
size = function(before, options, envir) if (before) return(options$size))
dir <- "smb://ihme.washington.edu/IHME/HOMES/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
dir <- "/HOMES/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
dir <- "/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
dir <- "/Volumes/aucarter/"
load(paste0(dir, "/bootcamp_r_training/data/us_state_cigarette_data.rdata"), verbose=T)
data <- read.csv("data/education_2015.csv")
mmr <- read.csv(paste0(dir,"bootcamp_r_training/data/mmr_data.csv"), stringsAsFactors=F)
main_dir <- paste0(dir,"bootcamp_r_training/") # CHANGE TO YOUR LOCAL COPY OF THE TRAINING MATERIALS!!
save(all, file=paste0(main_dir, "output/combined_cig_data.rdata"))
tinytex::install_tinytex()
tinytex::tinytex_root())
tinytex::tinytex_root()
devtools::load_all()
step = 10
level = 0.5
amp <- 0.1
wavelen <- 0.5 # per year
A <- (1 + amp * sin(2 * pi * (365 / step) * wavelen))
plot(A)
years <- 10
level <- 0.5
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, round(365 * years / step))
time
time <- seq(0, 365 * years,  step)
time
5%%4
time <- seq(0, 365 * years - (365 * years) %% step,  step)
time
source('~/Code/packages/pr2ar/R/model_comp/gen_sim.R', echo=TRUE)
years <- 10
level <- 0.5
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- (1 + amp * sin(time * 2 * pi *365 * wavelen)) * level
plot(A)
plot(A, type = "l")
plot(time, A, type = "l")
time = 180
time * 2 * pi * 365 * wavelen
A <- (1 + amp * sin(t2 * pi * 365 * wavelen / time)) * level
plot(time, A, type = "l")
A <- (1 + amp * sin(2 * pi * 365 * wavelen / time)) * level
plot(time, A, type = "l")
A <- (1 + amp * sin(2 * pi * (365 * wavelen) / time)) * level
plot(time, A, type = "l")
A
time
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- (1 + amp * sin(2 * pi * (365 * wavelen) / time)) * level
plot(time, A, type = "l")
plot(time / 360, A, type = "l")
A <- level + amp * sin(2 * pi * (365 * wavelen) / time)
plot(time / 360, A, type = "l")
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
plot(time / 360, A, type = "l")
Tx <- approx(x = time, y = c(min, max), n = (365 * years - (365 * years) %% step) / step)
min <- 0.1
max <- 0.4
time <- c(0, 365 * years)
Tx <- approx(x = time, y = c(min, max), n = (365 * years - (365 * years) %% step) / step)
Tx
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 19) {
A <- genA(A_type, step)
Tx <- genTx(Tx_type, step)
PR <- AR2PR(AR, Tx, PAR, Bfn)
return(PR)
}
genA <- function(type, step = 10, years = 10, plot = F) {
if(type == "seasonal") {
level <- 0.5
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
if(plot) {
plot(time / 360, A, type = "l")
}
}
return(A)
}
genTx <- function(type, step = 10, years = 10, plot = F) {
if(type == "increasing") {
min <- 0.1
max <- 0.4
time <- c(0, 365 * years - (365 * years) %% step)
Tx <- approx(x = time, y = c(min, max), n = (365 * years - (365 * years) %% step) / step)$y
}
}
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10)
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10) {
A <- genA(A_type, step)
Tx <- genTx(Tx_type, step)
PR <- AR2PR(AR, Tx, PAR, Bfn)
return(PR)
}
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing")
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10) {
A <- genA(A_type, step)
Tx <- genTx(Tx_type, step)
PR <- AR2PR(A, Tx, PAR, Bfn)
return(PR)
}
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing")
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10, rho = 0.5)
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing")
A
genA <- function(type, step = 10, years = 10, plot = F) {
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
if(plot) {
plot(time / 360, A, type = "l")
}
}
return(A)
}
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10, rho = 0.5)
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing")
Tx
time <- c(0, 365 * years - (365 * years) %% step)
time
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10) {
A <- genA(A_type, step)
Tx <- genTx(Tx_type, step)
PR <- AR2PR(A, Tx, PAR, Bfn)
return(PR)
}
genA <- function(type, step = 10, years = 10, plot = F) {
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
if(plot) {
plot(time / 360, A, type = "l")
}
}
return(A)
}
genTx <- function(type, step = 10, years = 10, plot = F) {
if(type == "increasing") {
min <- 0.1
max <- 0.4
time <- c(0, 365 * years - (365 * years) %% step)
Tx <- approx(x = time, y = c(min, max), n = ((365 * years - (365 * years) %% step) / step + 1))$y
}
}
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10, rho = 0.5)
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing")
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10, plot = F) {
A <- genA(A_type, step)
Tx <- genTx(Tx_type, step)
PR <- AR2PR(A, Tx, PAR, Bfn)$X
if(plot) {
time <- c(0, 365 * years - (365 * years) %% step)
plot(time / 360, PR, type = "l")
}
return(PR)
}
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10, plot = F) {
A <- genA(A_type, step, plot)
Tx <- genTx(Tx_type, step, plot)
PR <- AR2PR(A, Tx, PAR, Bfn)$X
if(plot) {
time <- c(0, 365 * years - (365 * years) %% step)
plot(time / 360, PR, type = "l")
}
return(PR)
}
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
A <- genA(A_type, step, plot)
A_type = "seasonal"
Tx_type = "increasing"
A <- genA(A_type, step, plot)
years = 10
step = 10
plot = T
A <- genA(A_type, step, plot)
genA <- function(type, step = 10, years = 10, plot = F) {
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
}
if(plot) {
print(plot(time / 360, A, type = "l"))
}
return(A)
}
A <- genA(A_type, step, plot)
plot
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
}
if(plot) {
print(plot(time / 360, A, type = "l"))
}
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
}
if(plot) {
plot(time / 360, A, type = "l")
}
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
plot(time / 360, A, type = "l")
genA <- function(type, step = 10, years = 10, plot = F) {
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
}
if(plot) {
plot(time / 360, A, type = "l")
}
return(A)
}
A <- genA(A_type, step, plot)
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
}
if(plot) {
plot(time / 360, A, type = "l")
}
return(A)
type == "seasonal"
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
plot(time / 360, A, type = "l")
if(plot) {
plot(time / 360, A, type = "l")
}
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10, plot = F) {
A <- genA(A_type, step, plot)
Tx <- genTx(Tx_type, step, plot)
PR <- AR2PR(A, Tx, PAR, Bfn)$X
if(plot) {
time <- c(0, 365 * years - (365 * years) %% step)
plot(time / 360, PR, type = "l")
}
return(PR)
}
A <- genA(A_type, step, plot)
A
years
step
A <- genA(A_type, step, years, plot)
A
Tx <- genTx(Tx_type, step, years, plot)
Tx
PR <- AR2PR(A, Tx, PAR, Bfn)$X
time <- c(0, 365 * years - (365 * years) %% step)
plot(time / 360, PR, type = "l")
length(time)
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10, plot = F) {
A <- genA(A_type, step, years, plot)
Tx <- genTx(Tx_type, step, years, plot)
PR <- AR2PR(A, Tx, PAR, Bfn)$X
if(plot) {
time <- seq(0, 365 * years - (365 * years) %% step,  step)
plot(time / 360, PR, type = "l")
}
return(PR)
}
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
A <- genA(A_type, step, years, plot)
plot
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
genTx <- function(type, step = 10, years = 10, plot = F) {
if(type == "increasing") {
min <- 0.1
max <- 0.4
time <- c(0, 365 * years - (365 * years) %% step)
Tx <- approx(x = time, y = c(min, max), n = ((365 * years - (365 * years) %% step) / step + 1))$y
}
if(plot) {
plot(time / 360, Tx, type = "l")
}
return(Tx)
}
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10, rho = 0.5)
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
A
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
A <- genA(A_type, step, years, plot)
Tx <- genTx(Tx_type, step, years, plot)
Tx <- genTx(Tx_type, step, years, plot)
genSim <- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10, plot = F) {
A <- genA(A_type, step, years)
Tx <- genTx(Tx_type, step, years)
PR <- AR2PR(A, Tx, PAR, Bfn)$X
if(plot) {
time <- seq(0, 365 * years - (365 * years) %% step,  step)
plot(time / 360, PR, type = "l")
}
return(PR)
}
genSim(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
genPR<- function(PAR, Bfn, A_type, Tx_type, step = 10, years = 10, plot = F) {
A <- genA(A_type, step, years)
Tx <- genTx(Tx_type, step, years)
PR <- AR2PR(A, Tx, PAR, Bfn)$X
if(plot) {
time <- seq(0, 365 * years - (365 * years) %% step,  step)
plot(time / 360, PR, type = "l")
}
return(PR)
}
genA <- function(type, step = 10, years = 10, plot = F) {
if(type == "seasonal") {
level <- 0.3
amp <- 0.1
wavelen <- 0.5 # per year
time <- seq(0, 365 * years - (365 * years) %% step,  step)
A <- level + amp * sin(2 * pi * time / (365 * wavelen))
}
if(plot) {
plot(time / 360, A, type = "l")
}
return(A)
}
genTx <- function(type, step = 10, years = 10, plot = F) {
if(type == "increasing") {
min <- 0.1
max <- 0.4
time <- c(0, 365 * years - (365 * years) %% step)
Tx <- approx(x = time, y = c(min, max), n = ((365 * years - (365 * years) %% step) / step + 1))$y
}
if(plot) {
plot(time / 360, Tx, type = "l")
}
return(Tx)
}
Bfn = makeBdrugs_age
PAR = list(In = 5, Cn = 2, Q = 0.95, dt = 10, rho = 0.5)
PR <- genPR(PAR, Bfn, A_type = "seasonal", Tx_type = "increasing", plot = T)
devtools::check()
devtools::check()
