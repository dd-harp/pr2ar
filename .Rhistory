AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0.01, 250), seq(0.01, 0.35, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0.01, 250), seq(0.01, 0.33, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0.01, 250), seq(0.01, 0.32, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0.01, 250), seq(0.01, 0.31, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
# rep(0.05, ncol(M))
PAR$rho = Tx[1]
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
PR2AReq(M[6000,1], Tx = 0.5, PAR, makeBdrugs_age)
PR2AReq(M[1000,1], Tx = 0.5, PAR, makeBdrugs_age)$A
PR2AReq(X = M[1000,1], Tx = 0.0, PAR, makeBdrugs_age)$A
PAR
PR2AReq(X = M[1000,1], Tx = 0.0, PAR, makeBdrugs_age)$A
# rep(0.05, ncol(M))
PAR$rho = Tx[1]
AR = PR2AR(X = M[10000,1:12], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
length(AR)
AR = PR2AR(X = M[10000,1:13], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
PR2AR(X = M[10000,1:13]
M[10000,1:13]
lines(x = 1:13 , M[10000,1:13], col = "red")
AR
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
AR = PR2AR(X = M[10000,1:13], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1:13 , M[10000,1:13], col = "red")
X = M[10000,1:13]
PR2AReq(X = X[1], Tx = 0.0, PAR, makeBdrugs_age)$A
PAR
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Xinteral = 30
Xinterval = 30
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
plot(X)
#' Interpolate a vector of rates to match the model time step
#'
#' @param rates A vector of rates
#' @param inStep Input interval size in days
#' @param outStep output interval size in days
#' @export
interpRates <- function(rates, inStep = 365, outStep = 10) {
size = (length(rates) - 1) * round(inStep / outStep) + 1
if(!any(is.na(rates))) {
smooth <- stats::smooth.spline(x = 1:length(rates), y = rates, all.knots = T)
interpX = seq(1, length(rates), length.out =  size)
interpR <- stats::predict(smooth$fit, interpX)$y
interpR[interpR < 0] = 0
} else {
interpR <- rep(NA, size)
}
return(interpR)
}
X = M[10000,1:13]
plot(X)
rates = X
smooth <- stats::smooth.spline(x = 1:length(rates), y = rates, all.knots = T)
interpX = seq(1, length(rates), length.out =  size)
interpR <- stats::predict(smooth$fit, interpX)$y
size = (length(rates) - 1) * round(inStep / outStep) + 1
PAR$dt
plot(interpRates(X, inStep = Xinterval, outStep = PAR$dt))
interpRates
inStep = 30
outStep = 10
size = (length(rates) - 1) * round(inStep / outStep) + 1
size
smooth <- stats::smooth.spline(x = 1:length(rates), y = rates, all.knots = T)
interpX = seq(1, length(rates), length.out =  size)
interpR <- stats::predict(smooth$fit, interpX)$y
plot(interpR)
smooth
smooth <- stats::smooth.spline(x = 1:length(rates), y = rates, all.knots = T)
interpX = seq(1, length(rates), length.out =  size)
interpR <- stats::predict(smooth$fit, interpX)$y
?stats::predict
?stats::smooth.spline
smooth <- stats::smooth.spline(x = 1:length(rates), y = rates, all.knots = T)
interpX = seq(1, length(rates), length.out =  size)
interpR <- stats::predict(smooth$fit, interpX)$y
plot(interpR)
smooth <- stats::smooth.spline(x = 1:length(rates), y = rates, all.knots = F)
interpX = seq(1, length(rates), length.out =  size)
interpR <- stats::predict(smooth$fit, interpX)$y
plot(interpR)
plot(rates)
interpR <- approx(x = 1:length(rates), y = rates, xout = interpX)
plot(interpR)
AR = PR2AR(X = M[10000,1:13], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1:13 , M[10000,1:13], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
devtools::load_all()
AR = PR2AR(X = M[10000,1:13], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1:13 , M[10000,1:13], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
rho
PAR$rho
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
X
Tx
Tx = rep(0, 12)
# rep(0.05, ncol(M))
PAR$rho = Tx[1]
AR = PR2AR(X = M[10000,1:13], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1:13 , M[10000,1:13], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = rep(0, 12)
# rep(0.05, ncol(M))
PAR$rho = Tx[1]
X = M[10000,1:13]
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
plot(X)
interpRates
interpRates <- function(rates, inStep = 365, outStep = 10) {
size = (length(rates) - 1) * round(inStep / outStep) + 1
if(!any(is.na(rates))) {
interpX = seq(1, length(rates), length.out =  size)
interpR <- approx(x = 1:length(rates), y = rates, xout = interpX)
} else {
interpR <- rep(NA, size)
}
return(interpR)
}
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
X = M[10000,1:13]
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
plot(X)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
plot(Tx)
str(Tx)
str(X)
interpRates <- function(rates, inStep = 365, outStep = 10) {
size = (length(rates) - 1) * round(inStep / outStep) + 1
if(!any(is.na(rates))) {
interpX = seq(1, length(rates), length.out =  size)
interpR <- approx(x = 1:length(rates), y = rates, xout = interpX)$y
} else {
interpR <- rep(NA, size)
}
return(interpR)
}
X = M[10000,1:13]
Tx = rep(0, 12)
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
plot(X)
plot(Tx)
if(is.null(Bfn)){
if (PAR$In > 1 & PAR$Cn > 0) {
Bfn = makeBdrugs_age
} else if (PAR$In > 1) {
Bfn = makeBage
} else if (PAR$Cn > 0) {
Bfn = makeBdrugs
} else {
Bfn = makeB
}
}
PAR = PAR
Bfn = makeBdrugs_age
Xinterval
AR <- simAR(X, Tx, PAR, Bfn, cpp = cpp)
cpp = T
AR <- simAR(X, Tx, PAR, Bfn, cpp = cpp)
plot(AR )
# Calculate AR
if (eq) {
AR <- PR2AReq(X, Tx, PAR, Bfn, showMessages)
} else {
AR <- simAR(X, Tx, PAR, Bfn, cpp = cpp)
}
plot(AR, type = "l", ylim = 0:1)
lines(X, color = "red")
lines(X, col = "red")
# Return to original input time step
outA = aggAR(AR, inStep = Xinterval, outStep = PAR$dt)
plot(outA)
plot(outA, type = "l")
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
1 - rho
PAR
interpRates <- function(rates, inStep = 365, outStep = 10) {
size = (length(rates) - 1) * round(inStep / outStep) + 1
if(!any(is.na(rates))) {
interpX = seq(1, length(rates), length.out =  size)
interpR <- approx(x = 1:length(rates), y = rates, xout = interpX)$y
} else {
interpR <- rep(NA, size)
}
return(interpR)
}
interpRates <- function(rates, inStep = 365, outStep = 10) {
size = (length(rates) - 1) * round(inStep / outStep) + 1
if(!any(is.na(rates))) {
interpX = seq(1, length(rates), length.out =  size)
interpR <- approx(x = 1:length(rates), y = rates, xout = interpX)$y
} else {
interpR <- rep(NA, size)
}
return(interpR)
}
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
PAR
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
X = M[10000,]
# Interpolate inputs to match time step
X = interpRates(X, inStep = Xinterval, outStep = PAR$dt)
Tx = interpRates(Tx, inStep = Xinterval, outStep = PAR$dt)
X
Tx
str(Tx)
Bfn = makeBdrugs_age
V = makeV(PAR, Bfn)
W = makeW(PAR, Bfn)
D = makeD(PAR)
AR <- simAR(X, Tx, PAR, Bfn, cpp = cpp)
# Return to original input time step
outA = aggAR(AR, inStep = Xinterval, outStep = PAR$dt)
str(outA)
plot(outA)
devtools::load_all()
interpRates
library(raster)
draw = 1
files <- list.files('/Users/aucarter/Dropbox/DAVE_ANALYSIS/', full.names = T)
draw.files <- grep(paste0("\\.", draw, "\\."), files, value = T)
l <- lapply(draw.files, raster)
M <- do.call(cbind, lapply(l, values))
saveRDS(M, "/Users/aucarter/Data/UGA_MAP_1.rds")
readRDS("/Users/aucarter/Data/UGA_MAP_1.rds")
M <- readRDS("/Users/aucarter/Data/UGA_MAP_1.rds")
str(M)
PAR = list(A = 0.1, rho = 0.6, Q = 0.95, In = 5, Cn = 2, dt = 10)
Tx = c(rep(0.01, 250), seq(0.01, 0.315, length.out = (ncol(M) - 250)))
# rep(0.05, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
legend(col = c("red", "gray", "black"), legend = c("Tx", "PfPR", "AR"))
legend("upperright", col = c("red", "gray", "black"), legend = c("Tx", "PfPR", "AR"))
legend("topright", col = c("red", "gray", "black"), legend = c("Tx", "PfPR", "AR"))
legend("topright", legend = c("Tx", "PfPR", "AR"), col = c("red", "gray", "black"))
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
legend("topright", legend = c("Tx", "PfPR", "AR"), col = c("red", "gray", "black"))
legend("topright", legend = c("Tx", "PfPR", "AR"), fill = c("red", "gray", "black"))
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
legend("topright", legend = c("PfPR", "AR", "Tx"), fill = c("red", "black", "gray"))
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1), xlab = "Year", ylab = "Proportion")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
legend("topright", legend = c("PfPR", "AR", "Tx"), fill = c("red", "black", "gray"))
l[[1]]
saveRDS(l, "/Users/aucarter/Data/UGA_MAP_1.rds")
l <- readRDS("/Users/aucarter/Data/UGA_MAP_1.rds")
str(l)
M <- do.call(cbind, lapply(l, values))
str(l)
str(l[[1]])
X = M[10000,1:13]
Tx = rep(0, 12)
# rep(0.05, ncol(M))
PAR$rho = Tx[1]
AR = PR2AR(X = M[10000,1:13], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
plot(1:12 , AR, ty = 'l', ylim = c(0, 1))
lines(x = 1:13 , M[10000,1:13], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
X = M[10000,]
smoothK.i = function(i, x, t, alpha=1, beta=2, norm=1){
if(length(norm)==1) norm = rep(norm, length(x))
sum(x*exp(-alpha*((t-t[i])/beta)^2))/norm[i]
}
smoothK = function(x, t, alpha=3, beta=90){
norm = sapply(1:length(t), smoothK.i, x=x*0+1, t=t, alpha=alpha, beta=beta, norm = 1)
vals = sapply(1:length(t), smoothK.i, x=x, t=t, alpha=alpha, beta=beta, norm=norm)
list(vals = vals, norm=norm)
}
smoothX = smoothK(X, 1:length(X))
plot(X, type = "l")
lines(smoothX, col = "red")
lines(1:length(X), smoothX, col = "red")
length(smoothX)
length(X)
smoothX = smoothK(X, 1:length(X))$vals
plot(X, type = "l")
lines(1:length(X), smoothX, col = "red")
smoothX = smoothK(X, 1:length(X), beta = 0.5)$vals
plot(X, type = "l")
lines(1:length(X), smoothX, col = "red")
smoothX = smoothK(X, 1:length(X), beta = 3)$vals
plot(X, type = "l")
lines(1:length(X), smoothX, col = "red")
smoothX = smoothK(X, 1:length(X), beta = 2)$vals
plot(X, type = "l")
lines(1:length(X), smoothX, col = "red")
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 5, beta = 2.5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 20, beta = 2.5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 2, beta = 2.5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 2, beta = 5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 2, beta = 3)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 2, beta = 2)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 2, beta = 2.5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 1, beta = 2.5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 120, beta = 2.5)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 120, beta = 20)$vals
plot(smoothX, type = "l")
smoothX = smoothK(X, 1:length(X), alpha = 120, beta = 20)$vals
plot(smoothX, type = "l")
lines(1:length(X), X, col = "red")
#######################################
dt <- data.table(PfPR = X, Year = seq(1980, 2000, length.out = length(X)))
dt
#######################################
dt <- data.table(PfPR = X, Year = seq(1980, 2018, length.out = length(X)))
#######################################
library(ggplot2)
dt[, smoothPfPR := smoothK(PfPR, alpha = 2, beta = 2.5)]
dt[, smoothPfPR := smoothK(PfPR, alpha = 2, beta = 2.5), by = .I]
dt[, smoothPfPR := smoothK(PfPR, .I,  alpha = 2, beta = 2.5), by = .I]
dt[, smoothPfPR := smoothK(PfPR, .I,  alpha = 2, beta = 2.5)$vals, by = .I]
dt
dt <- melt(dt, id.vars = "Year")
dt <- data.table(MAP = X, Year = seq(1980, 2018, length.out = length(X)))
dt[, Smoothed := smoothK(MAP, .I,  alpha = 2, beta = 2.5)$vals, by = .I]
dt <- melt(dt, id.vars = "Year", value.name = "PfPR")
dt
dt <- data.table(MAP = X, Year = seq(1980, 2018, length.out = length(X)))
dt[, Smoothed := smoothK(MAP, .I,  alpha = 2, beta = 2.5)$vals, by = .I]
dt <- melt(dt, id.vars = "Year", value.name = "PfPR", variable.name = "Source")
gg <- ggplot(dt, aes(x = Year, y = PfPR, color = Source)) + geom_line()
gg
dt <- data.table(MAP = X, Year = seq(1980, 2018, length.out = length(X)))
dt[, Smoothed := smoothK(MAP, .I,  alpha = 2, beta = 2.5)$vals, by = .I]
dt <- melt(dt, id.vars = "Year", value.name = "PfPR", variable.name = "Source")
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) + geom_line()
gg
theme_set("classic")
library(ggplot2)
theme_set(theme_classic())
dt <- data.table(MAP = X, Year = seq(1980, 2018, length.out = length(X)))
dt[, Smoothed := smoothK(MAP, .I,  alpha = 2, beta = 2.5)$vals, by = .I]
dt <- melt(dt, id.vars = "Year", value.name = "PfPR", variable.name = "Source")
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) + geom_line()
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) + geom_line() +
geom_vline(xint = 2000)
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) + geom_line() +
geom_vline(xintercept = 2000)
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = 2000:2006, alpha = 0.1) +
geom_line()
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = unique(Year), alpha = 0.1) +
geom_line()
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = Year, alpha = 0.1) +
geom_line()
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = 1995:2018, alpha = 0.1) +
geom_line()
gg
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = 1995:2018, alpha = 0.1) +
geom_line() +
ggtitle(paste("Smoothing PfPR - alpha =", 2, "; beta =", 2.5))
gg
#####
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = 1995:2018, alpha = 0.1) +
geom_line() +
ggtitle(paste("Smoothing PfPR\nalpha =", 2, "; beta =", 2.5))
gg
library(ggplot2)
theme_set(theme_classic())
dt <- data.table(MAP = X, Year = seq(1980, 2018, length.out = length(X)))
dt[, Smoothed := smoothK(MAP, .I,  alpha = 2, beta = 2.5)$vals, by = .I]
dt <- melt(dt, id.vars = "Year", value.name = "PfPR", variable.name = "Source")
gg <- ggplot(dt[Year >= 1995], aes(x = Year, y = PfPR, color = Source)) +
geom_vline(xintercept = 1995:2018, alpha = 0.1) +
geom_line() +
ggtitle(paste("Smoothed PfPR\nalpha =", 2, "; beta =", 2.5))
gg
11305*47000
l <- readRDS("/Users/aucarter/Data/UGA_MAP_1.rds")
M <- do.call(cbind, lapply(l, values))
library(raster)
draw = 1
l <- readRDS("/Users/aucarter/Data/UGA_MAP_1.rds")
M <- do.call(cbind, lapply(l, values))
PAR = list(A = 0.1, rho = 1, Q = 0.95, In = 5, Cn = 2, dt = 10)
Tx = rep(1, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30, eq = T)
devtools::load_all()
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30, eq = T)
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
AR
PAR = list(A = 0.1, rho = 0, Q = 0.95, In = 5, Cn = 2, dt = 10)
Tx = rep(0, ncol(M))
AR = PR2AR(X = M[10000,], Tx = Tx, PAR = PAR, Bfn = makeBdrugs_age, Xinterval = 30)
AR
plot(1980 + (1:(ncol(M) - 1)) / 12 , AR, ty = 'l', ylim = c(0, 1), xlab = "Year", ylab = "Proportion")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , M[10000,-1], col = "red")
lines(x = 1980 + (1:(ncol(M) - 1)) / 12 , Tx[-1], col = "gray")
legend("topright", legend = c("PfPR", "AR", "Tx"), fill = c("red", "black", "gray"))
PAR
par = "A"
PAR[[par]]
PAR[[par]] = 0
PAR
PAR$A = 0.5
PAR$rho = 0.1
makeW = function(PAR, Bfn, par = "A") {
V = makeV(PAR, Bfn, par)
(Bfn(PAR) - V)/PAR[[par]]
}
makeV = function(PAR, Bfn, par = "A") {
PAR[[par]] = 0
Bfn(PAR)
}
V = makeV(PAR, makeBdrugs_age, par = "rho")
V
W = makeW(PAR, makeBdrugs_age, par = "rho")
W
B = makeBdrugs_age(PAR)
B
V + PAR$rho*W
PAR
